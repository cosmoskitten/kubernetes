From 03b00db715a59354e4c1386c3407843406758ad5 Mon Sep 17 00:00:00 2001
From: Josh Horwitz <horwitzja@gmail.com>
Date: Tue, 15 Aug 2017 14:43:11 -0400
Subject: [PATCH 1/1] cloud provider stuff

---
 pkg/cloudprovider/cloud.go                         |  7 ++++++-
 pkg/cloudprovider/providers/aws/aws.go             |  4 ++++
 pkg/cloudprovider/providers/azure/azure_zones.go   |  5 +++++
 .../providers/cloudstack/cloudstack.go             |  5 +++++
 pkg/cloudprovider/providers/fake/fake.go           |  5 +++++
 pkg/cloudprovider/providers/gce/gce_zones.go       |  8 +++++++-
 pkg/cloudprovider/providers/openstack/openstack.go |  4 ++++
 pkg/cloudprovider/providers/photon/photon.go       |  4 ++++
 pkg/cloudprovider/providers/rackspace/rackspace.go |  4 ++++
 pkg/controller/cloud/node_controller.go            | 22 +++++++++++++++++++++-
 10 files changed, 65 insertions(+), 3 deletions(-)

diff --git a/pkg/cloudprovider/cloud.go b/pkg/cloudprovider/cloud.go
index 5c4651f..c27ec7d 100644
--- a/pkg/cloudprovider/cloud.go
+++ b/pkg/cloudprovider/cloud.go
@@ -23,6 +23,7 @@ import (
 
 	"k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/types"
+	"k8s.io/kubernetes/pkg/cloudprovider"
 	"k8s.io/kubernetes/pkg/controller"
 )
 
@@ -124,7 +125,7 @@ type Instances interface {
 	// ProviderID is a unique identifier of the node. This will not be called
 	// from the node whose nodeaddresses are being queried. i.e. local metadata
 	// services cannot be used in this method to obtain nodeaddresses
-	NodeAddressesByProviderID(providerId string) ([]v1.NodeAddress, error)
+	NodeAddressesByProviderID(providerID string) ([]v1.NodeAddress, error)
 	// ExternalID returns the cloud provider ID of the node with the specified NodeName.
 	// Note that if the instance does not exist or is no longer running, we must return ("", cloudprovider.InstanceNotFound)
 	ExternalID(nodeName types.NodeName) (string, error)
@@ -185,4 +186,8 @@ type Zone struct {
 type Zones interface {
 	// GetZone returns the Zone containing the current failure zone and locality region that the program is running in
 	GetZone() (Zone, error)
+
+	GetZoneByNodeName(name types.NodeName) (cloudprovider.Zone, error)
+
+	GetZoneByProviderID(providerID string) (cloudprovider.Zone, error)
 }
diff --git a/pkg/cloudprovider/providers/aws/aws.go b/pkg/cloudprovider/providers/aws/aws.go
index 704c5e9..ddd0048 100644
--- a/pkg/cloudprovider/providers/aws/aws.go
+++ b/pkg/cloudprovider/providers/aws/aws.go
@@ -1201,6 +1201,10 @@ func (c *Cloud) GetZone() (cloudprovider.Zone, error) {
 	}, nil
 }
 
+func (c *Cloud) GetZoneByProviderID(providerID string) (cloudprovider.Zone, error) {
+	return cloudprovider.Zone{}, errors.New("unimplemented")
+}
+
 // Abstraction around AWS Instance Types
 // There isn't an API to get information for a particular instance type (that I know of)
 type awsInstanceType struct {
diff --git a/pkg/cloudprovider/providers/azure/azure_zones.go b/pkg/cloudprovider/providers/azure/azure_zones.go
index ab2dd9e..28ac726 100644
--- a/pkg/cloudprovider/providers/azure/azure_zones.go
+++ b/pkg/cloudprovider/providers/azure/azure_zones.go
@@ -18,6 +18,7 @@ package azure
 
 import (
 	"encoding/json"
+	"errors"
 	"io"
 	"io/ioutil"
 	"net/http"
@@ -55,6 +56,10 @@ func (az *Cloud) GetZone() (cloudprovider.Zone, error) {
 	return zone, nil
 }
 
+func (az *Cloud) GetZoneByProviderID(providerID string) (cloudprovider.Zone, error) {
+	return cloudprovider.Zone{}, errors.New("unimplemented")
+}
+
 func fetchFaultDomain() (*string, error) {
 	resp, err := http.Get(instanceInfoURL)
 	if err != nil {
diff --git a/pkg/cloudprovider/providers/cloudstack/cloudstack.go b/pkg/cloudprovider/providers/cloudstack/cloudstack.go
index 1b86d82..4fdd12c 100644
--- a/pkg/cloudprovider/providers/cloudstack/cloudstack.go
+++ b/pkg/cloudprovider/providers/cloudstack/cloudstack.go
@@ -17,6 +17,7 @@ limitations under the License.
 package cloudstack
 
 import (
+	"errors"
 	"fmt"
 	"io"
 
@@ -130,3 +131,7 @@ func (cs *CSCloud) GetZone() (cloudprovider.Zone, error) {
 	glog.V(2).Infof("Current zone is %v", cs.zone)
 	return cloudprovider.Zone{Region: cs.zone}, nil
 }
+
+func (cs *CSCloud) GetZoneByProviderID(providerID string) (cloudprovider.Zone, error) {
+	return cloudprovider.Zone{}, errors.New("unimplemented")
+}
diff --git a/pkg/cloudprovider/providers/fake/fake.go b/pkg/cloudprovider/providers/fake/fake.go
index 05c10c1..1602bcb 100644
--- a/pkg/cloudprovider/providers/fake/fake.go
+++ b/pkg/cloudprovider/providers/fake/fake.go
@@ -252,6 +252,11 @@ func (f *FakeCloud) GetZone() (cloudprovider.Zone, error) {
 	return f.Zone, f.Err
 }
 
+func (f *FakeCloud) GetZoneByProviderID(providerID string) (cloudprovider.Zone, error) {
+	f.addCall("get-zone-by-provider-id")
+	return f.Zone, f.Err
+}
+
 func (f *FakeCloud) ListRoutes(clusterName string) ([]*cloudprovider.Route, error) {
 	f.Lock.Lock()
 	defer f.Lock.Unlock()
diff --git a/pkg/cloudprovider/providers/gce/gce_zones.go b/pkg/cloudprovider/providers/gce/gce_zones.go
index 3179e75..6849bde 100644
--- a/pkg/cloudprovider/providers/gce/gce_zones.go
+++ b/pkg/cloudprovider/providers/gce/gce_zones.go
@@ -17,13 +17,15 @@ limitations under the License.
 package gce
 
 import (
+	"errors"
 	"fmt"
 	"time"
 
 	compute "google.golang.org/api/compute/v1"
 
-	"k8s.io/kubernetes/pkg/cloudprovider"
 	"strings"
+
+	"k8s.io/kubernetes/pkg/cloudprovider"
 )
 
 func newZonesMetricContext(request, region string) *metricContext {
@@ -41,6 +43,10 @@ func (gce *GCECloud) GetZone() (cloudprovider.Zone, error) {
 	}, nil
 }
 
+func (gce *GCECloud) GetZoneByProviderID(providerID string) (cloudprovider.Zone, error) {
+	return cloudprovider.Zone{}, errors.New("unimplemented")
+}
+
 // ListZonesInRegion returns all zones in a GCP region
 func (gce *GCECloud) ListZonesInRegion(region string) ([]*compute.Zone, error) {
 	mc := newZonesMetricContext("list", region)
diff --git a/pkg/cloudprovider/providers/openstack/openstack.go b/pkg/cloudprovider/providers/openstack/openstack.go
index 9a03973..6a55c49 100644
--- a/pkg/cloudprovider/providers/openstack/openstack.go
+++ b/pkg/cloudprovider/providers/openstack/openstack.go
@@ -555,6 +555,10 @@ func (os *OpenStack) GetZone() (cloudprovider.Zone, error) {
 	return zone, nil
 }
 
+func (os *OpenStack) GetZoneByProviderID(providerID string) (cloudprovider.Zone, error) {
+	return cloudprovider.Zone{}, errors.New("unimplemented")
+}
+
 func (os *OpenStack) Routes() (cloudprovider.Routes, bool) {
 	glog.V(4).Info("openstack.Routes() called")
 
diff --git a/pkg/cloudprovider/providers/photon/photon.go b/pkg/cloudprovider/providers/photon/photon.go
index e9c9fbc..8f2d5ad 100644
--- a/pkg/cloudprovider/providers/photon/photon.go
+++ b/pkg/cloudprovider/providers/photon/photon.go
@@ -521,6 +521,10 @@ func (pc *PCCloud) GetZone() (cloudprovider.Zone, error) {
 	return pc.Zone, nil
 }
 
+func (pc *PCCLoud) GetZoneByProviderID(providerID string) (cloudprovider.Zone, error) {
+	return cloudprovider.Zone{}, errors.New("unimplemented")
+}
+
 // Routes returns a false since the interface is not supported for photon controller.
 func (pc *PCCloud) Routes() (cloudprovider.Routes, bool) {
 	return nil, false
diff --git a/pkg/cloudprovider/providers/rackspace/rackspace.go b/pkg/cloudprovider/providers/rackspace/rackspace.go
index b087bfa..24cf034 100644
--- a/pkg/cloudprovider/providers/rackspace/rackspace.go
+++ b/pkg/cloudprovider/providers/rackspace/rackspace.go
@@ -554,6 +554,10 @@ func (os *Rackspace) GetZone() (cloudprovider.Zone, error) {
 	return cloudprovider.Zone{Region: os.region}, nil
 }
 
+func (rs *Rackspace) GetZoneByProviderID(providerID string) (cloudprovider.Zone, error) {
+	return cloudprovider.Zone{}, errors.New("unimplemented")
+}
+
 // Create a volume of given size (in GiB)
 func (rs *Rackspace) CreateVolume(name string, size int, vtype, availability string, tags *map[string]string) (string, string, error) {
 	return "", "", errors.New("unimplemented")
diff --git a/pkg/controller/cloud/node_controller.go b/pkg/controller/cloud/node_controller.go
index 26e1036..1185ab7 100644
--- a/pkg/controller/cloud/node_controller.go
+++ b/pkg/controller/cloud/node_controller.go
@@ -284,6 +284,14 @@ func (cnc *CloudNodeController) AddCloudNode(obj interface{}) {
 			return err
 		}
 
+		// https://github.com/kubernetes/kubernetes/issues/49836
+		if curNode.Spec.ProviderID == "" {
+			curNode.Spec.ProviderID, err = cloudprovider.GetInstanceProviderID(cnc.cloud, types.NodeName(curNode.Name))
+			if err != nil {
+				return err
+			}
+		}
+
 		nodeAddresses, err := getNodeAddressesByProviderIDOrName(instances, curNode)
 		if err != nil {
 			glog.Errorf("%v", err)
@@ -321,7 +329,7 @@ func (cnc *CloudNodeController) AddCloudNode(obj interface{}) {
 		}
 
 		if zones, ok := cnc.cloud.Zones(); ok {
-			zone, err := zones.GetZone()
+			zone, err := getZoneByProviderIDOrName(zones, curNode)
 			if err != nil {
 				return fmt.Errorf("failed to get zone from cloud provider: %v", err)
 			}
@@ -430,3 +438,15 @@ func getInstanceTypeByProviderIDOrName(instances cloudprovider.Instances, node *
 	}
 	return instanceType, err
 }
+
+func getZoneByProviderIDOrName(zones cloudprovider.Zones, node *v1.Node) (cloudprovider.Zone, error) {
+	zone, err := zones.GetByProviderID(node.Spec.ProviderID)
+	if err != nil {
+		providerIDErr := err
+		zone, err = zones.GetByNodeName(types.NodeName(node.Name))
+		if err != nil {
+			return "", fmt.Errorf("Zone: Error fetching by providerID: %v Error fetching by NodeName: %v", providerIDErr, err)
+		}
+	}
+	return zone, err
+}
-- 
2.8.3

