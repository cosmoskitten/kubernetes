/*
Copyright 2017 The Kubernetes sample-controller Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/sample-controller/pkg/apis/example/v1alpha1"
)

// NGINXLister helps list NGINXs.
type NGINXLister interface {
	// List lists all NGINXs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NGINX, err error)
	// NGINXs returns an object that can list and get NGINXs.
	NGINXs(namespace string) NGINXNamespaceLister
	NGINXListerExpansion
}

// nGINXLister implements the NGINXLister interface.
type nGINXLister struct {
	indexer cache.Indexer
}

// NewNGINXLister returns a new NGINXLister.
func NewNGINXLister(indexer cache.Indexer) NGINXLister {
	return &nGINXLister{indexer: indexer}
}

// List lists all NGINXs in the indexer.
func (s *nGINXLister) List(selector labels.Selector) (ret []*v1alpha1.NGINX, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NGINX))
	})
	return ret, err
}

// NGINXs returns an object that can list and get NGINXs.
func (s *nGINXLister) NGINXs(namespace string) NGINXNamespaceLister {
	return nGINXNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NGINXNamespaceLister helps list and get NGINXs.
type NGINXNamespaceLister interface {
	// List lists all NGINXs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.NGINX, err error)
	// Get retrieves the NGINX from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.NGINX, error)
	NGINXNamespaceListerExpansion
}

// nGINXNamespaceLister implements the NGINXNamespaceLister
// interface.
type nGINXNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NGINXs in the indexer for a given namespace.
func (s nGINXNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NGINX, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NGINX))
	})
	return ret, err
}

// Get retrieves the NGINX from the indexer for a given namespace and name.
func (s nGINXNamespaceLister) Get(name string) (*v1alpha1.NGINX, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nginx"), name)
	}
	return obj.(*v1alpha1.NGINX), nil
}
